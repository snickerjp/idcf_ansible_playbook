global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        tune.ssl.default-dh-param 2048
        
        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        option  forwardfor
        option  http-server-close
        maxconn 2048
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

        stats enable
          stats uri /stats
          stats realm Haproxy\ Statistics
          stats auth user:password

frontend {{ haproxy_frontend_name }}-http
   bind {{ haproxy_frontend_bind_address }}:{{ haproxy_frontend_port }}
   reqadd X-Forwarded-Proto:\ http
   default_backend www-backend

frontend {{ haproxy_frontend_name }}-https
   bind {{ haproxy_frontend_bind_address }}:443 ssl crt /etc/ssl/private/{{ haproxy_pem }}
   reqadd X-Forwarded-Proto:\ https
   default_backend www-backend

backend www-backend
   redirect scheme https if !{ ssl_fc }
   balance roundrobin  # each server is used in turns, according to assigned weight
   option forwardfor
   option httpchk {{ haproxy_backend_httpchk }}
   cookie SERVERID insert indirect
{% for backend in haproxy_backend_servers %}
    server {{ backend.name }} {{ backend.address }} cookie {{ backend.name }} weight 1 maxconn 1000 check inter 4000
{% endfor %}
